{"ast":null,"code":"var _jsxFileName = \"/Users/sharhy_1/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactionModifications, setTransactionModifications] = useState({});\n  const handleTransactionChange = useCallback((transactionId, newStatus) => {\n    setTransactionModifications(prev => ({ ...prev,\n      [transactionId]: newStatus\n    }));\n  }, []);\n  const mergedTransactions = useMemo(() => {\n    var _transactions$data;\n\n    // Assume transactions is an array of transactions\n    const currentTransactions = (_transactions$data = transactions === null || transactions === void 0 ? void 0 : transactions.data) !== null && _transactions$data !== void 0 ? _transactions$data : [];\n    return currentTransactions.map(transaction => {\n      if (transactionModifications.hasOwnProperty(transaction.id)) {\n        return { ...transaction,\n          approved: transactionModifications[transaction.id]\n        };\n      }\n\n      return transaction;\n    });\n  }, [transactions, transactionModifications]);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: employeeUtils.loading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            setIsFilteredByEmployee(false);\n            return;\n          }\n\n          setIsFilteredByEmployee(newValue.id !== EMPTY_EMPLOYEE.id);\n\n          if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), !isFilteredByEmployee && transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5jlsFUr1QUtVO1Sklm13DnMRFh0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isFilteredByEmployee","setIsFilteredByEmployee","isLoading","setIsLoading","transactionModifications","setTransactionModifications","handleTransactionChange","transactionId","newStatus","prev","mergedTransactions","currentTransactions","transactions","map","transaction","hasOwnProperty","id","approved","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/sharhy_1/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isFilteredByEmployee, setIsFilteredByEmployee] = useState(false);\n  const [isLoading, setIsLoading] = useState(false)\n\n  const [transactionModifications, setTransactionModifications] = useState({});\n  const handleTransactionChange = useCallback((transactionId, newStatus) => {\n    setTransactionModifications(prev => ({ ...prev, [transactionId]: newStatus }));\n  }, []);\n\n  const mergedTransactions = useMemo(() => {\n    // Assume transactions is an array of transactions\n    const currentTransactions = transactions?.data ?? [];\n    return currentTransactions.map(transaction => {\n      if (transactionModifications.hasOwnProperty(transaction.id)) {\n        return { ...transaction, approved: transactionModifications[transaction.id] };\n      }\n      return transaction;\n    });\n  }, [transactions, transactionModifications]);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n    \n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={employeeUtils.loading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              setIsFilteredByEmployee(false);\n              return;\n            }\n\n            setIsFilteredByEmployee(newValue.id !== EMPTY_EMPLOYEE.id);\n\n            if (newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {!isFilteredByEmployee && transactions !== null && paginatedTransactions?.nextPage !== null ? (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          ) : null\n        }\n\n\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}